---
// 1. Recibimos los datos de los dropdowns desde index.astro
const { data } = Astro.props;

// 2. Importamos el componente del formulario
import ReportForm from "./ReportForm.astro";
---

<div
  id="report-manager-wrapper"
  class="flex flex-col justify-center items-center w-full"
  data-options={JSON.stringify(data)}
>
  <div class="card bg-base-100 shadow-xl mb-6">
    <div
      class="flex flex-col justify-center items-center card-body p-6 sm:p-10"
    >
      <ReportForm />
    </div>
  </div>

  <div class="card bg-base-100 shadow-xl w-full">
    <div class="card-body flex flex-col text-center w-full p-6 sm:p-10">
      <h2 id="title" class="card-title text-2xl font-bold justify-center">
        Reportes Guardados
      </h2>
      <p class="text-gray-600 mb-4">
        Los reportes guardados se almacenan localmente en tu navegador.
      </p>
      <div class="overflow-x-auto">
        <table class="table w-full">
          <thead>
            <tr>
              <th>Fecha</th>
              <th>Terminal</th>
              <th>Residente</th>
              <th>Turno</th>
              <th>Producto</th>
              <th>Pieza</th>
              <th>Cant.</th>
              <th>Motivo</th>
              <th>Zona</th>
              <th>Secuencia</th>
              <th>VIN/HU</th>
              <th>Defecto</th>
              <th>Trazab.</th>
              <th>Acción</th>
              <th>P. de Corte</th>
              <th>Foto PdC</th>
            </tr>
          </thead>
          <tbody id="reportTableBody"> </tbody>
        </table>
      </div>
      <p id="noReportsMessage" class="mt-4 text-center text-gray-500 hidden">
        Aún no hay reportes guardados.
      </p>

      <div class="mt-6 flex flex-col sm:flex-row gap-4">
        <button id="exportButton" class="btn btn-primary flex-1">
          Exportar a Excel (CSV) y Vaciar
        </button>
        <button id="shareButton" class="btn btn-secondary flex-1">
          Compartir
        </button>
      </div>
    </div>
  </div>

  <dialog id="messageModal" class="modal">
    <div class="modal-box">
      <h3 id="modalTitle" class="font-bold text-lg"></h3>
      <p id="modalMessage" class="py-4"></p>
      <div class="modal-action">
        <form method="dialog">
          <button id="modalCloseButton" class="btn btn-primary">Cerrar</button>
        </form>
      </div>
    </div>
  </dialog>
</div>

<script>
  // Tu variable global de estado
  let reports = [];

  // --- Persistent Data Management ---
  function saveReports() {
    localStorage.setItem("qualityReports", JSON.stringify(reports));
  }

  function loadReports() {
    const storedReports = localStorage.getItem("qualityReports");
    if (storedReports) {
      reports = JSON.parse(storedReports);
    }
  }

  function clearReports() {
    localStorage.removeItem("qualityReports");
    reports = [];
  }

  // Render reports to the table
  function renderReports() {
    const reportTableBody = document.getElementById("reportTableBody");
    const noReportsMessage = document.getElementById("noReportsMessage");

    reportTableBody.innerHTML = "";
    if (reports.length === 0) {
      noReportsMessage.classList.remove("hidden");
    } else {
      noReportsMessage.classList.add("hidden");
      reports.forEach((report) => {
        const row = document.createElement("tr");
        row.classList.add("hover"); // Clase 'hover' de DaisyUI
        row.innerHTML = `
            <td class="py-4 px-6 font-medium text-gray-900 whitespace-nowrap">${
              report.fecha || "N/A"
            }</td>
            <td class="py-4 px-6">${report.terminalAutomotriz || "N/A"}</td>
            <td class="py-4 px-6">${report.residente || "N/A"}</td>
            <td class="py-4 px-6">${report.turno || "N/A"}</td>
            <td class="py-4 px-6">${report.producto || "N/A"}</td>
            <td class="py-4 px-6">${report.pieza || "N/A"}</td>
            <td class="py-4 px-6">${report.cantidadNoConforme || "N/A"}</td>
            <td class="py-4 px-6">${report.motivoNoConforme || "N/A"}</td>
            <td class="py-4 px-6">${report.zona || "N/A"}</td>
            <td class="py-4 px-6">${report.rotacionSecuencia || "N/A"}</td>
            <td class="py-4 px-6">${report.vinHu || "N/A"}</td>
            <td class="py-4 px-6">${report.defectoProceso || "N/A"}</td>
            <td class="py-4 px-6">
                ${
                  report.etiquetaUrls && report.etiquetaUrls.length > 0
                    ? report.etiquetaUrls
                        .map(
                          (url) =>
                            `<a href="${url}" target="_blank" class="link link-primary">Ver</a>`
                        )
                        .join(", ")
                    : "N/A"
                }
            </td>
            <td class="py-4 px-6">${report.accion || "N/A"}${
              report.accionDetalle ? ` (${report.accionDetalle})` : ""
            }</td>
            <td class="py-4 px-6">${report.puntoDeCorte || "N/A"}</td>
            <td class="py-4 px-6">
                ${
                  report.puntoDeCorteUrls && report.puntoDeCorteUrls.length > 0
                    ? report.puntoDeCorteUrls
                        .map(
                          (url) =>
                            `<a href="${url}" target="_blank" class="link link-primary">Ver</a>`
                        )
                        .join(", ")
                    : "N/A"
                }
            </td>
        `;
        reportTableBody.appendChild(row);
      });
    }
  }

  // --- Application Logic ---
  const wrapper = document.getElementById("report-manager-wrapper");
  const data = JSON.parse(wrapper.dataset.options);

  loadReports();
  renderReports();

  // Referencias del DOM (Todos los IDs están disponibles)
  const reportForm = document.getElementById("reportForm");
  const residenteSelect = document.getElementById("residente");
  const residenteEmailDiv = document.getElementById("residenteEmailDiv");
  const residenteEmailInput = document.getElementById("residenteEmailInput");
  const accionSelect = document.getElementById("accion");
  const accionDetalleDiv = document.getElementById("accionDetalleDiv");
  const etiquetaInput = document.getElementById("etiquetaInput");
  const etiquetaInputCamera = document.getElementById("etiquetaInputCamera");
  const etiquetaPreview = document.getElementById("etiquetaPreview");
  const previewEtiquetaContainer = document.getElementById(
    "previewEtiquetaContainer"
  );
  const puntoDeCorteInput = document.getElementById("puntoDeCorteInput");
  const puntoDeCorteInputCamera = document.getElementById(
    "puntoDeCorteInputCamera"
  );
  const puntoDeCortePreview = document.getElementById("puntoDeCortePreview");
  const previewPuntoDeCorteContainer = document.getElementById(
    "previewPuntoDeCorteContainer"
  );
  const submitButton = document.getElementById("submitButton");
  const loadingIndicator = document.getElementById("loadingIndicator");
  const exportButton = document.getElementById("exportButton");
  const shareButton = document.getElementById("shareButton");

  // Lógica del Modal (DaisyUI)
  const messageModal = document.getElementById("messageModal");
  const modalTitle = document.getElementById("modalTitle");
  const modalMessage = document.getElementById("modalMessage");

  function showMessage(title, message) {
    modalTitle.textContent = title;
    modalMessage.textContent = message;
    if (messageModal.showModal) {
      messageModal.showModal();
    } else {
      messageModal.classList.remove("hidden");
    }
  }

  // Lógica de 'populateSelect'
  function populateSelect(selectElement, options) {
    selectElement.innerHTML = "";
    const defaultOption = document.createElement("option");
    defaultOption.value = "";
    defaultOption.textContent = "Seleccionar...";
    defaultOption.disabled = true;
    defaultOption.selected = true;
    selectElement.appendChild(defaultOption);

    options.forEach((option) => {
      const optionElement = document.createElement("option");
      optionElement.value = option;
      optionElement.textContent = option;
      selectElement.appendChild(optionElement);
    });
  }

  // Lógica para campos "Otro"
  const dropdownsConOtro = [
    {
      selectId: "producto",
      inputId: "productoOtroInput",
      divId: "productoOtroDiv",
    },
    {
      selectId: "motivoNoConforme",
      inputId: "motivoNoConformeOtroInput",
      divId: "motivoNoConformeOtroDiv",
    },
    { selectId: "zona", inputId: "zonaOtroInput", divId: "zonaOtroDiv" },
    {
      selectId: "defectoProceso",
      inputId: "defectoProcesoOtroInput",
      divId: "defectoProcesoOtroDiv",
    },
  ];

  dropdownsConOtro.forEach(({ selectId, inputId, divId }) => {
    const selectElement = document.getElementById(selectId);
    const inputDiv = document.getElementById(divId);
    const inputElement = document.getElementById(inputId);

    selectElement.addEventListener("change", (event) => {
      if (event.target.value === "Otro") {
        inputDiv.classList.remove("hidden");
        inputElement.required = true;
      } else {
        inputDiv.classList.add("hidden");
        inputElement.required = false;
        inputElement.value = "";
      }
    });
  });

  // Populamos los dropdowns
  populateSelect(
    document.getElementById("terminalAutomotriz"),
    data.terminalesAutomotrices
  );
  populateSelect(residenteSelect, data.residentes);
  populateSelect(document.getElementById("producto"), data.productos);
  populateSelect(document.getElementById("turno"), data.turnos);
  populateSelect(
    document.getElementById("motivoNoConforme"),
    data.motivosNoConformes
  );
  populateSelect(document.getElementById("zona"), data.zonas);
  populateSelect(
    document.getElementById("defectoProceso"),
    data.defectosProceso
  );

  // Listeners de campos condicionales
  residenteSelect.addEventListener("change", (event) => {
    if (event.target.value === "Ingresar mail") {
      residenteEmailDiv.classList.remove("hidden");
      residenteEmailInput.required = true;
    } else {
      residenteEmailDiv.classList.add("hidden");
      residenteEmailInput.required = false;
      residenteEmailInput.value = "";
    }
  });

  accionSelect.addEventListener("change", (event) => {
    if (event.target.value === "Si") {
      accionDetalleDiv.classList.remove("hidden");
    } else {
      accionDetalleDiv.classList.add("hidden");
    }
  });

  // Lógica de previsualización de imágenes
  function handleImageSelection(fileInput, previewContainer, previewParentDiv) {
    previewContainer.innerHTML = "";
    if (fileInput.files.length > 0) {
      Array.from(fileInput.files).forEach((file) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const img = document.createElement("img");
          img.src = e.target.result;
          img.classList.add("rounded-lg", "shadow-md");
          previewContainer.appendChild(img);
        };
        reader.readAsDataURL(file);
      });
      previewParentDiv.classList.remove("hidden");
    } else {
      previewParentDiv.classList.add("hidden");
    }
  }

  etiquetaInput.addEventListener("change", () =>
    handleImageSelection(
      etiquetaInput,
      previewEtiquetaContainer,
      etiquetaPreview
    )
  );
  etiquetaInputCamera.addEventListener("change", () =>
    handleImageSelection(
      etiquetaInputCamera,
      previewEtiquetaContainer,
      etiquetaPreview
    )
  );
  puntoDeCorteInput.addEventListener("change", () =>
    handleImageSelection(
      puntoDeCorteInput,
      previewPuntoDeCorteContainer,
      puntoDeCortePreview
    )
  );
  puntoDeCorteInputCamera.addEventListener("change", () =>
    handleImageSelection(
      puntoDeCorteInputCamera,
      previewPuntoDeCorteContainer,
      puntoDeCortePreview
    )
  );

  // Lógica de subida a Cloudinary
  async function uploadImageToCloudinary(file) {
    const cloudName = "dk6fevv3i"; // TU cloudName
    const uploadPreset = "gaston_app"; // TU uploadPreset

    if (
      cloudName === "YOUR_CLOUD_NAME" ||
      uploadPreset === "YOUR_UPLOAD_PRESET"
    ) {
      throw new Error(
        "Por favor, reemplaza YOUR_CLOUD_NAME y YOUR_UPLOAD_PRESET con tus valores de Cloudinary."
      );
    }

    const url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", uploadPreset);

    try {
      const response = await fetch(url, {
        method: "POST",
        body: formData,
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error.message || "Fallo al subir la imagen a Cloudinary."
        );
      }
      const data = await response.json();
      return data.secure_url;
    } catch (error) {
      throw error;
    }
  }

  async function uploadImages(files: any, progressMessage: any) {
    const urls = [];
    for (let i = 0; i < files.length; i++) {
      showMessage(
        "Subiendo imágenes",
        `${progressMessage} (${i + 1}/${files.length})...`
      );
      const url = await uploadImageToCloudinary(files[i]);
      urls.push(url);
    }
    return urls;
  }

  // Listener del Submit del Formulario
  reportForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    submitButton.disabled = true;
    loadingIndicator.classList.remove("hidden");

    const selectedResidente = residenteSelect.value;
    const residenteValue =
      selectedResidente === "Ingresar mail"
        ? document.getElementById("residenteEmailInput").value
        : selectedResidente;

    if (selectedResidente === "Ingresar mail" && !residenteValue) {
      showMessage(
        "Error de validación",
        "Por favor, ingrese el email del residente."
      );
      submitButton.disabled = false;
      loadingIndicator.classList.add("hidden");
      return;
    }

    let etiquetaUrls = [];
    const etiquetaFiles =
      etiquetaInput.files.length > 0
        ? etiquetaInput.files
        : etiquetaInputCamera.files;
    if (etiquetaFiles.length > 0) {
      try {
        etiquetaUrls = await uploadImages(
          Array.from(etiquetaFiles),
          "Subiendo fotos de la etiqueta"
        );
      } catch (error) {
        showMessage(
          "Error de subida",
          "No se pudieron subir las fotos de la etiqueta: " + error.message
        );
        submitButton.disabled = false;
        loadingIndicator.classList.add("hidden");
        return;
      }
    }

    let puntoDeCorteUrls = [];
    const puntoDeCorteFiles =
      puntoDeCorteInput.files.length > 0
        ? puntoDeCorteInput.files
        : puntoDeCorteInputCamera.files;
    if (puntoDeCorteFiles.length > 0) {
      try {
        puntoDeCorteUrls = await uploadImages(
          Array.from(puntoDeCorteFiles),
          "Subiendo fotos del punto de corte"
        );
      } catch (error) {
        showMessage(
          "Error de subida",
          "No se pudieron subir las fotos del punto de corte: " + error.message
        );
        submitButton.disabled = false;
        loadingIndicator.classList.add("hidden");
        return;
      }
    }

    const getSelectValue = (selectId, inputId) => {
      const selectElement = document.getElementById(selectId);
      if (selectElement.value === "Otro") {
        return document.getElementById(inputId).value;
      }
      return selectElement.value;
    };

    const report = {
      fecha: new Date().toLocaleString(),
      terminalAutomotriz: document.getElementById("terminalAutomotriz").value,
      residente: residenteValue,
      turno: document.getElementById("turno").value,
      producto: getSelectValue("producto", "productoOtroInput"),
      pieza: document.getElementById("pieza").value,
      cantidadNoConforme: document.getElementById("cantidadNoConforme").value,
      motivoNoConforme: getSelectValue(
        "motivoNoConforme",
        "motivoNoConformeOtroInput"
      ),
      zona: getSelectValue("zona", "zonaOtroInput"),
      rotacionSecuencia: document.getElementById("rotacionSecuencia").value,
      vinHu: document.getElementById("vinHu").value,
      defectoProceso: getSelectValue(
        "defectoProceso",
        "defectoProcesoOtroInput"
      ),
      etiquetaUrls: etiquetaUrls,
      accion: accionSelect.value,
      accionDetalle: document.getElementById("accionDetalle").value || "N/A",
      puntoDeCorte: document.getElementById("puntoDeCorte").value,
      puntoDeCorteUrls: puntoDeCorteUrls,
    };

    reports.push(report);
    saveReports();
    renderReports();

    showMessage("Éxito", "El problema ha sido registrado correctamente.");
    reportForm.reset();

    // Resetear vistas previas y campos condicionales
    previewEtiquetaContainer.innerHTML = "";
    previewPuntoDeCorteContainer.innerHTML = "";
    etiquetaPreview.classList.add("hidden");
    puntoDeCortePreview.classList.add("hidden");
    accionDetalleDiv.classList.add("hidden");
    residenteEmailDiv.classList.add("hidden");
    dropdownsConOtro.forEach(({ divId }) =>
      document.getElementById(divId).classList.add("hidden")
    );

    submitButton.disabled = false;
    loadingIndicator.classList.add("hidden");
  });

  // Lógica de Exportación y Compartir
  function generateCsvContent() {
    if (reports.length === 0) {
      return null;
    }

    const headers = [
      "Fecha",
      "Terminal Automotriz",
      "Residente",
      "Turno",
      "Producto",
      "Pieza",
      "Cantidad No Conforme",
      "Motivo No Conforme",
      "Zona",
      "Rotacion/Secuencia",
      "VIN/HU",
      "Defecto de Proceso",
      "Trazabilidad Etiqueta URLs",
      "Accion",
      "Detalle Accion",
      "Punto de Corte",
      "Punto de Corte URLs",
    ];
    let csvContent = `data:text/csv;charset=utf-8,${headers
      .map((h) => `"${h}"`)
      .join(",")}\n`;

    reports.forEach((report) => {
      const row = [
        report.fecha,
        report.terminalAutomotriz,
        report.residente,
        report.turno,
        Array.isArray(report.producto)
          ? report.producto.join(", ")
          : report.producto,
        report.pieza,
        report.cantidadNoConforme,
        Array.isArray(report.motivoNoConforme)
          ? report.motivoNoConforme.join(", ")
          : report.motivoNoConforme,
        Array.isArray(report.zona) ? report.zona.join(", ") : report.zona,
        report.rotacionSecuencia,
        report.vinHu,
        Array.isArray(report.defectoProceso)
          ? report.defectoProceso.join(", ")
          : report.defectoProceso,
        report.etiquetaUrls.join(", "),
        report.accion,
        report.accionDetalle,
        report.puntoDeCorte,
        report.puntoDeCorteUrls.join(", "),
      ]
        .map((field) => `"${String(field).replace(/"/g, '""')}"`)
        .join(",");
      csvContent += row + "\n";
    });
    return csvContent;
  }

  exportButton.addEventListener("click", () => {
    if (reports.length === 0) {
      showMessage("Error", "No hay reportes para exportar.");
      return;
    }
    const csvContent = generateCsvContent();

    const lastReport = reports[reports.length - 1];
    const terminal = (lastReport.terminalAutomotriz || "Reporte").replace(
      / /g,
      "_"
    );
    const producto = (lastReport.producto || "Producto").replace(/ /g, "_");
    const pieza = (lastReport.pieza || "Pieza").replace(/ /g, "_");
    const turno = (lastReport.turno || "Turno").replace(/ /g, "_");
    const fecha = new Date().toLocaleDateString("es-AR").replace(/\//g, "-");
    const fileName = `${terminal}_${producto}_${pieza}_${turno}_${fecha}.csv`;

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", fileName);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Eliminar todos los reportes después de la exportación
    reports = [];
    saveReports();
    renderReports();

    showMessage(
      "Exportación Exitosa",
      `El archivo ${fileName} ha sido generado y descargado. La lista de reportes se ha vaciado.`
    );
  });

  shareButton.addEventListener("click", async () => {
    const csvContent = generateCsvContent();
    if (!csvContent) {
      showMessage("Error", "No hay reportes para compartir.");
      return;
    }

    if (navigator.share) {
      try {
        const csvBlob = new Blob(
          [decodeURI(csvContent.replace("data:text/csv;charset=utf-8,", ""))],
          { type: "text/csv;charset=utf-8;" }
        );
        const csvFile = new File([csvBlob], "reporte_de_calidad.csv", {
          type: "text/csv;charset=utf-8;",
        });

        await navigator.share({
          files: [csvFile],
          title: "Reporte de Calidad",
          text: "Aquí está el reporte de calidad en formato CSV.",
        });
        showMessage(
          "Compartido",
          "El reporte ha sido compartido exitosamente."
        );
      } catch (error) {
        console.log("Error al compartir:", error);
        showMessage(
          "Error",
          "Se canceló la acción de compartir o ocurrió un error: " +
            error.message
        );
      }
    } else {
      showMessage(
        "Función no disponible",
        "La función de compartir no está disponible en este navegador. Intenta exportar."
      );
    }
  });
</script>
